/*
updated code for LF-2 Kit 2023 edition
Left sensor- A1
Right Sensor- A5
Sensor readings are mapped to a value between 0-1000 to get more consistent line following results using the readLine() function

*/

#include <SparkFun_TB6612.h>

#define AIN1 4
#define BIN1 6
#define AIN2 3
#define BIN2 7
#define PWMA 9
#define PWMB 10
#define STBY 5

// these constants are used to allow you to make your motor configuration
// line up with function names like forward.  Value can be 1 or -1
const int offsetA = 1;
const int offsetB = 1;


// Initializing motors.  The library will allow you to initialize as many
// motors as you have memory for.  If you are using functions like forward
// that take 2 motors as arguements you can either write new functions or
// call the function more than once.

Motor motor1 = Motor(AIN1, AIN2, PWMA, offsetA, STBY);
Motor motor2 = Motor(BIN1, BIN2, PWMB, offsetB, STBY);


int P, D, I, previousError, PIDvalue, error;
int lsp, rsp;
int lfspeed = 90;

float Kp = 0.04;
float Kd = 0.1;
float Ki = 0;


int minValues[8], maxValues[8], threshold[6], sensorValue[6], sensorArray[6];

void setup() {
  Serial.begin(9600);
  pinMode(11, INPUT_PULLUP);
  pinMode(12, INPUT_PULLUP);
  pinMode(13, OUTPUT);
}


void loop() {
  while (digitalRead(11)) {}
  delay(1000);
  calibrate();
  while (digitalRead(12)) {}
  delay(1000);

  while (1) {
    readLine();

    if (sensorValue[1] > 500 && sensorValue[5] < 500) {
      motor1.drive(0);
      motor2.drive(lfspeed);
      digitalWrite(13, LOW);
    }

    else if (sensorValue[5] > 500 && sensorValue[1] < 500) {
      motor1.drive(lfspeed);
      motor2.drive(0);
      digitalWrite(13, LOW);
    }

    else if (sensorValue[3] > 600) {
      linefollow();
      digitalWrite(13, LOW);
    }
  }
}

void linefollow() {
  int error = (sensorValue[2] - sensorValue[4]);//uncomment this line in case of line thickness <=25mm
  
  //int error = (sensorValue[4] - sensorValue[2]); //uncomment this line in case of line thickness >25mm
  
  P = error;
  I = I + error;
  D = error - previousError;

  PIDvalue = (Kp * P) + (Ki * I) + (Kd * D);
  previousError = error;

  lsp = lfspeed - PIDvalue;
  rsp = lfspeed + PIDvalue;

  if (lsp > 255) {
    lsp = 255;
  }
  if (lsp < 0) {
    lsp = 0;
  }
  if (rsp > 255) {
    rsp = 255;
  }
  if (rsp < 0) {
    rsp = 0;
  }
  motor1.drive(lsp);
  motor2.drive(rsp);
}



void calibrate() {
  for (int i = 0; i < 6; i++) {
    minValues[i] = analogRead(i);
    maxValues[i] = analogRead(i);
  }

  for (int i = 0; i < 3000; i++) {
    motor1.drive(50);
    motor2.drive(-50);

    for (int i = 1; i < 6; i++) {
      if (analogRead(i) < minValues[i]) {
        minValues[i] = analogRead(i);
      }
      if (analogRead(i) > maxValues[i]) {
        maxValues[i] = analogRead(i);
      }
    }
  }

  for (int i = 1; i < 6; i++) {
    threshold[i] = (minValues[i] + maxValues[i]) / 2;
    Serial.print(threshold[i]);
    Serial.print("   ");
  }
  Serial.println();

  motor1.drive(0);
  motor2.drive(0);
}

void readLine() {
  for (int i = 1; i < 6; i++) {
    sensorValue[i] = map(analogRead(i), minValues[i], maxValues[i], 0, 1000);
    sensorValue[i] = constrain(sensorValue[i], 0, 1000);
  }
}
